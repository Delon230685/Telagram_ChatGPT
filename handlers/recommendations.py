# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, ConversationHandler
# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ChatGPT
from services.openai_client import get_chatgpt_response

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
SELECT_CATEGORY, SELECT_GENRE = range(2)

# –°–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —ç–º–æ–¥–∑–∏
CATEGORIES = {
    "movies": "üé¨ –§–∏–ª—å–º—ã",
    "books": "üìö –ö–Ω–∏–≥–∏",
    "music": "üéµ –ú—É–∑—ã–∫–∞",
    "games": "üéÆ –ò–≥—Ä—ã"
}

# –°–ª–æ–≤–∞—Ä—å –∂–∞–Ω—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
GENRES = {
    "movies": ["üî´ –ë–æ–µ–≤–∏–∫", "üòÇ –ö–æ–º–µ–¥–∏—è", "üé≠ –î—Ä–∞–º–∞", "üöÄ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "üíò –ú–µ–ª–æ–¥—Ä–∞–º–∞"],
    "books": ["üßô –§—ç–Ω—Ç–µ–∑–∏", "üïµÔ∏è –î–µ—Ç–µ–∫—Ç–∏–≤", "üöÄ –ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "üíî –†–æ–º–∞–Ω", "üìñ –ö–ª–∞—Å—Å–∏–∫–∞"],
    "music": ["üé§ –ü–æ–ø", "üé∏ –†–æ–∫", "üé∑ –î–∂–∞–∑", "üéπ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "üé∂ –•–∏–ø-—Ö–æ–ø"],
    "games": ["üéÆ –≠–∫—à–µ–Ω", "üß© –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏", "üåç –û—Ç–∫—Ä—ã—Ç—ã–π –º–∏—Ä", "üëæ RPG", "üèéÔ∏è –ì–æ–Ω–∫–∏"]
}

# –®–∞–±–ª–æ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ChatGPT –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
RECOMMENDATION_TEMPLATES = {
    "movies": "–î–∞–π 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤ –≤ –∂–∞–Ω—Ä–µ {genre}. –£–∫–∞–∂–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
    "books": "–ü—Ä–µ–¥–ª–æ–∂–∏ 3 –∫–Ω–∏–≥–∏ –≤ –∂–∞–Ω—Ä–µ {genre}. –£–∫–∞–∂–∏ –∞–≤—Ç–æ—Ä–∞, –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
    "music": "–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3 –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∞–ª—å–±–æ–º–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∂–∞–Ω—Ä–µ {genre}. –£–∫–∞–∂–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞.",
    "games": "–ù–∞–∑–æ–≤–∏ 3 –∏–≥—Ä—ã –≤ –∂–∞–Ω—Ä–µ {genre}. –£–∫–∞–∂–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
}


async def recommend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommend - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ show_categories"""
    return await show_categories(update, context)

async def recommend_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    return await show_categories(update, context)

async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"cat_{code}")]
        for code, name in CATEGORIES.items()
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –∏–∑ callback –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:</b>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:</b>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

    return SELECT_CATEGORY  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


async def select_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if query.data == "cancel":
        await query.edit_message_text("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = query.data.split("_")[1]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ user_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
    context.user_data["category"] = category

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    genres = GENRES[category]
    keyboard = []

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏ (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É)
    for i in range(0, len(genres), 2):
        if i + 1 < len(genres):
            keyboard.append([
                InlineKeyboardButton(genres[i], callback_data=f"genre_{i}"),
                InlineKeyboardButton(genres[i + 1], callback_data=f"genre_{i + 1}")
            ])
        else:
            keyboard.append([InlineKeyboardButton(genres[i], callback_data=f"genre_{i}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–∞
    await query.edit_message_text(
        f"üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –¥–ª—è {CATEGORIES[category]}:</b>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return SELECT_GENRE  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞


async def select_genre(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if query.data == "back":
        return await show_categories(update, context)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
    genre_idx = int(query.data.split("_")[1])
    category = context.user_data["category"]
    selected_genre = GENRES[category][genre_idx]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä –≤ user_data
    context.user_data["genre"] = selected_genre
    context.user_data["genre_idx"] = genre_idx

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    await query.edit_message_text("üîÑ <b>–ò—â—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...</b>", parse_mode='HTML')

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT –ø–æ —à–∞–±–ª–æ–Ω—É
        prompt = RECOMMENDATION_TEMPLATES[category].format(genre=selected_genre)
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç ChatGPT
        recommendations = await get_chatgpt_response(prompt)

        if not recommendations:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"genre_{genre_idx}")],
            [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data=f"cat_{category}")],
            [InlineKeyboardButton("üé≠ –î—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="back")]
        ]

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        await query.edit_message_text(
            f"üé≠ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {selected_genre}:</b>\n\n{recommendations}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
            parse_mode='HTML'
        )

    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
    else:
        await update.message.reply_text("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥


def setup_recommend_handlers(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('recommend', recommend_command),
            CommandHandler('recommendations', recommend_command),  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            CallbackQueryHandler(recommend_callback, pattern="^recommend_")
        ],
        states={
            SELECT_CATEGORY: [CallbackQueryHandler(select_category, pattern="^cat_|cancel$")],
            SELECT_GENRE: [CallbackQueryHandler(select_genre, pattern="^genre_|back$")]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥
    )
    app.add_handler(conv_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ