"""–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"""
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler, CallbackQueryHandler
from services.openai_client import get_chatgpt_response

logger = logging.getLogger(__name__)

SELECT_LANG, WAIT_TEXT = range(2)

LANGUAGES = {
    "en": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "es": "üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π",
    "fr": "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", 
    "de": "üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π",
    "ja": "üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π",
    "zh": "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π"
}


async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ show_lang_menu"""
    return await show_lang_menu(update, context)


async def show_lang_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        keyboard = [
            [InlineKeyboardButton(lang, callback_data=f"lang_{code}")]
            for code, lang in LANGUAGES.items()
        ]
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        image_path = os.path.join('data', 'images', 'translate.jpg')
        caption = "üåç <b>–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Ç–µ–∫—Å—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:"

        if update.callback_query:
            await update.callback_query.answer()
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=photo,
                        caption=caption,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=caption,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
        else:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=caption,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
            else:
                await update.message.reply_text(
                    caption,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )

        return SELECT_LANG

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_lang_menu: {e}")
        await send_error(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞")
        return ConversationHandler.END


async def lang_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω"
        )
        return ConversationHandler.END

    lang_code = query.data.split("_")[1]
    context.user_data["target_lang"] = lang_code
    lang_name = LANGUAGES[lang_code]

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"üåç –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: <b>{lang_name}</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
        parse_mode='HTML'
    )

    return WAIT_TEXT


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        text = update.message.text
        lang_code = context.user_data.get("target_lang")
        lang_name = LANGUAGES.get(lang_code, "")

        if not lang_code:
            await update.message.reply_text("‚ùå –Ø–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /translate")
            return ConversationHandler.END

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )

        processing_msg = await update.message.reply_text("üîÑ –ü–µ—Ä–µ–≤–æ–¥... ‚è≥")

        try:
            prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {lang_name}. –°–æ—Ö—Ä–∞–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–º—ã—Å–ª:\n\n{text}"
            translated = await get_chatgpt_response(prompt, mode="translate")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT: {e}")
            translated = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="new_text")],
            [InlineKeyboardButton("üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_lang")],
            [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await processing_msg.delete()
        await update.message.reply_text(
            f"üåç <b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {lang_name}:</b>\n\n{translated}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

        return WAIT_TEXT

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")
        await send_error(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞")
        return WAIT_TEXT


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    query = update.callback_query
    await query.answer()

    if query.data == "new_text":
        lang_code = context.user_data.get("target_lang")
        lang_name = LANGUAGES.get(lang_code, "")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ <b>{lang_name}</b>:",
            parse_mode='HTML'
        )
        return WAIT_TEXT

    elif query.data == "change_lang":
        return await show_lang_menu(update, context)

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω"
    )
    return ConversationHandler.END

async def send_error(update: Update, text: str):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    error_msg = f"‚ö†Ô∏è {text}"
    if update.callback_query:
        await update.callback_query.message.reply_text(error_msg)
    else:
        await update.message.reply_text(error_msg)

def setup_translate_handlers(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('translate', translate_command),
            CallbackQueryHandler(translate_command, pattern="^translate$")
        ],
        states={
            SELECT_LANG: [CallbackQueryHandler(lang_selected, pattern=r"^lang_\w+|cancel$")],
            WAIT_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
                CallbackQueryHandler(handle_callback, pattern=r"^new_text|change_lang|cancel$")
            ],
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)],
    )
    app.add_handler(conv_handler)