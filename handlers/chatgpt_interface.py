# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging

from openai.types.beta.threads import Message
# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler
# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ChatGPT
from services.openai_client import get_chatgpt_response
# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
import os
from io import BytesIO

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_MESSAGE = 1

# –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ChatGPT
CAPTION = '''ü§ñ <b>ChatGPT –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</b>\n\n
–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ ChatGPT!\n\n
üí° <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n
‚Ä¢ –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n
‚Ä¢ –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ –∫–æ—Ç–∞\n
‚Ä¢ –ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Å—Ç—É –∫–∞—Ä–±–æ–Ω–∞—Ä—É?\n
‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n
‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:'''


async def gpt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ gpt_start"""
    return await gpt_start(update, context)


async def gpt_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ChatGPT"""
    try:
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        image_path = os.path.join('data', 'images', 'chatgpt.jpg')

        if os.path.exists(image_path):
            try:
                # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ —á—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                with open(image_path, 'rb') as photo_file:
                    photo = InputFile(BytesIO(photo_file.read()), filename='chatgpt.jpg')

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback)
                target = update.callback_query.message if update.callback_query else update.message
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é
                await target.reply_photo(
                    photo=photo,
                    caption=CAPTION,
                    parse_mode='HTML'
                )
            except Exception as img_error:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_error}", exc_info=True)
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await send_text_message(update, CAPTION)
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await send_text_message(update, CAPTION)

        # –û—Ç–≤–µ—Ç –Ω–∞ callback_query (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏")
        if update.callback_query:
            await update.callback_query.answer()

        # –í–æ–∑–≤—Ä–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        return WAITING_FOR_MESSAGE

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        await send_error_message(update, "üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ChatGPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return -1  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ConversationHandler


async def handle_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ChatGPT"""
    try:
        user_message = update.message.text

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π)
        if any(word in user_message.lower() for word in ["–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–æ–¥", "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]):
            mode = "translate"
            prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–æ—á–Ω–æ: {user_message}"
        else:
            mode = "default"
            prompt = f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n{user_message}\n\n–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏."

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å... ‚è≥")
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
        gpt_response = await get_chatgpt_response(prompt, mode=mode)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üí¨ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="gpt_new")],
            [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
        ]

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            f"ü§ñ <b>–û—Ç–≤–µ—Ç:</b>\n\n{gpt_response}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        return WAITING_FOR_MESSAGE

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é (/start)."
        )
        return WAITING_FOR_MESSAGE


async def gpt_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ChatGPT"""
    query = update.callback_query
    await query.answer()

    if query.data == "gpt_new":
        if query.message and isinstance(query.message, Message):
            await query.message.edit_text(CAPTION, parse_mode='HTML')
        else:
            await query.from_user.send_message(CAPTION, parse_mode='HTML')
        return WAITING_FOR_MESSAGE
    elif query.data == "main_menu":
        from handlers.basic import start
        return await start(update, context)


async def send_text_message(update: Update, text: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if update.callback_query:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —è–≤–ª—è–µ—Ç—Å—è Message
        if update.callback_query.message and isinstance(update.callback_query.message, Message):
            await update.callback_query.message.edit_text(text, parse_mode='HTML')
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await update.callback_query.answer()
            await update.callback_query.from_user.send_message(text, parse_mode='HTML')
    else:
        await update.message.reply_text(text, parse_mode='HTML')


async def send_error_message(update: Update, error_text: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    await send_text_message(update, error_text)


def setup_gpt_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è ChatGPT —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt
    application.add_handler(CommandHandler("gpt", gpt_command))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Regex(r'^(/|start|help|quiz)'),
        handle_gpt_message))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å "gpt_"
    application.add_handler(CallbackQueryHandler(gpt_callback_handler, pattern="^gpt_"))